generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model ai_recommendation {
  id             String    @id @default(cuid()) @db.VarChar
  recommendation String?
  createdAt      DateTime? @db.Date
  user_id        String?   @db.VarChar
  user           user?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model finance_report {
  id        String    @id @default(cuid()) @db.VarChar
  createdAt DateTime? @db.Date
  user_id   String?   @db.VarChar
  user      user?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique
  userId        String
  expires       DateTime
  user          user?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userId")
}

model struk_scanned {
  id             String    @id @default(cuid()) @db.VarChar
  image_url      String?
  extracted_text String?
  uploadedAt     DateTime? @db.Date
  user_id        String?   @db.VarChar
  user           user?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                String              @id @default(uuid())
  name              String?             @db.VarChar
  username          String?             @unique @db.VarChar
  image             String?
  sessionID         String?             @db.VarChar
  email             String             @unique
  emailVerified     Boolean?
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  ai_recommendation ai_recommendation[]
  finance_report    finance_report[]
  session           Session[]
  struk_scanned     struk_scanned[]
  account           Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], name: "accountId")
}
