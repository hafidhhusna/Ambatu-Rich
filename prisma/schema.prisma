generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ai_recommendation {
  id             String    @id @default(dbgenerated("('RECOMMENDATION_'::text || nextval('public.ai_recommendation_id'::regclass))")) @db.VarChar
  recommendation String?
  createdAt      DateTime? @db.Date
  user_id        String?   @db.VarChar
  user           user?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model finance_report {
  id        String    @id @default(dbgenerated("('FINANCE_REPORT_'::text || nextval('public.report_id'::regclass))")) @db.VarChar
  createdAt DateTime? @db.Date
  user_id   String?   @db.VarChar
  user      user?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model session {
  sessionID      String    @id @db.VarChar
  sessionToken   String?
  userID         String?   @db.VarChar
  sessionExpires DateTime? @db.Date
  user           user?     @relation(fields: [userID], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model struk_scanned {
  id             String    @id @default(dbgenerated("('STRUK_'::text || nextval('public.struk_id'::regclass))")) @db.VarChar
  image_url      String?
  extracted_text String?
  uploadedAt     DateTime? @db.Date
  user_id        String?   @db.VarChar
  user           user?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                String              @id @default(dbgenerated("('USER_'::text || nextval('public.user_id'::regclass))")) @db.VarChar
  name              String?             @db.VarChar
  image             String?
  sessionID         String?             @db.VarChar
  ai_recommendation ai_recommendation[]
  finance_report    finance_report[]
  session           session[]
  struk_scanned     struk_scanned[]
}
